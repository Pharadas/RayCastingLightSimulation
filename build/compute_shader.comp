#version 430 core

layout (local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform image2D imgOutput;

layout (location = 0) uniform float t;
layout (location = 1) uniform vec2 viewportDimensions;
layout (location = 3) uniform vec3 position;
layout (location = 4) uniform vec2 rotation;

#define PI 3.141592

#define MAX_REHITS 1

const bool USE_BRANCHLESS_DDA = true;
const int MAX_RAY_STEPS = 200;

#define LIGHT 0
#define POLARIZADOR 1
#define RETARDADOR  2
#define WALL 3
#define GOAL 4
#define NONE 5

struct OpticalObject {
    int type;
    float value;
    vec3 alternate_value; // Color in the case of light
    vec3 pos;
};

#define NUMBER_OF_OPTICAL_OBJECTS 2

#define LIGHT_OBJECTS OpticalObject[](\
 OpticalObject(LIGHT, 0, vec3(1, 0.5, 0.5), vec3(25.5, 25.5, 25.5)),\
 OpticalObject(LIGHT, 0, vec3(0.1, 0.8, 0.1), vec3(25.5, 25.5, 25.5))\
)

#define OPTICAL_OBJECTS_ARRAY OpticalObject[](\
 OpticalObject(LIGHT, 0, vec3(1), vec3(25.5, 25.5, 25.5)),\
 OpticalObject(LIGHT, 0, vec3(1), vec3(25.5, 25.5, 25.5))\
)

struct OpticalObjectStack {
  OpticalObject[10] objects_hit;
  int number_of_objects_hit;
};

struct RayObject {
  vec3 rayDir;
  vec3 rayPos;
  ivec3 mapPos;

  vec3 deltaDist;
  ivec3 rayStep;
  vec3 sideDist; 

  bvec3 mask;

  float distance_traveled;
  vec3 current_real_position;
  vec3 originalDir;

  bool endedInHit;

  vec4 color;

  OpticalObjectStack object_stack;
};

// Hyperboloc functions by toneburst from 
// https://machinesdontcare.wordpress.com/2008/03/10/glsl-cosh-sinh-tanh/
// These are missing in GLSL 1.10 and 1.20, uncomment if you need them 

/*
// COSH Function (Hyperbolic Cosine)
float cosh(float val)
{
    float tmp = exp(val);
    float cosH = (tmp + 1.0 / tmp) / 2.0;
    return cosH;
}
 
// TANH Function (Hyperbolic Tangent)
float tanh(float val)
{
    float tmp = exp(val);
    float tanH = (tmp - 1.0 / tmp) / (tmp + 1.0 / tmp);
    return tanH;
}
 
// SINH Function (Hyperbolic Sine)
float sinh(float val)
{
    float tmp = exp(val);
    float sinH = (tmp - 1.0 / tmp) / 2.0;
    return sinH;
}   
*/

// Complex Number math by julesb
// https://github.com/julesb/glsl-util
// Additions by Johan Karlsson (DonKarlssonSan)

#define cx_mul(a, b) vec2(a.x*b.x-a.y*b.y, a.x*b.y+a.y*b.x)
#define cx_div(a, b) vec2(((a.x*b.x+a.y*b.y)/(b.x*b.x+b.y*b.y)),((a.y*b.x-a.x*b.y)/(b.x*b.x+b.y*b.y)))
#define cx_modulus(a) length(a)
#define cx_conj(a) vec2(a.x, -a.y)
#define cx_arg(a) atan(a.y, a.x)
#define cx_sin(a) vec2(sin(a.x) * cosh(a.y), cos(a.x) * sinh(a.y))
#define cx_cos(a) vec2(cos(a.x) * cosh(a.y), -sin(a.x) * sinh(a.y))

vec2 cx_sqrt(vec2 a) {
  float r = length(a);
  float rpart = sqrt(0.5*(r+a.x));
  float ipart = sqrt(0.5*(r-a.x));
  if (a.y < 0.0) ipart = -ipart;
  return vec2(rpart,ipart);
}

vec2 cx_tan(vec2 a) {return cx_div(cx_sin(a), cx_cos(a)); }

vec2 cx_log(vec2 a) {
    float rpart = sqrt((a.x*a.x)+(a.y*a.y));
    float ipart = atan(a.y,a.x);
    if (ipart > PI) ipart=ipart-(2.0*PI);
    return vec2(log(rpart),ipart);
}

vec2 cx_mobius(vec2 a) {
    vec2 c1 = a - vec2(1.0,0.0);
    vec2 c2 = a + vec2(1.0,0.0);
    return cx_div(c1, c2);
}

vec2 cx_z_plus_one_over_z(vec2 a) {
    return a + cx_div(vec2(1.0,0.0), a);
}

vec2 cx_z_squared_plus_c(vec2 z, vec2 c) {
    return cx_mul(z, z) + c;
}

vec2 cx_sin_of_one_over_z(vec2 z) {
    return cx_sin(cx_div(vec2(1.0,0.0), z));
}

////////////////////////////////////////////////////////////
// end Complex Number math by julesb
////////////////////////////////////////////////////////////

// My own additions to complex number math
#define cx_sub(a, b) vec2(a.x - b.x, a.y - b.y)
#define cx_add(a, b) vec2(a.x + b.x, a.y + b.y)
#define cx_abs(a) length(a)
vec2 cx_to_polar(vec2 a) {
    float phi = atan(a.y / a.x);
    float r = length(a);
    return vec2(r, phi); 
}
    
// Complex power
// Let z = r(cos θ + i sin θ)
// Then z^n = r^n (cos nθ + i sin nθ)
vec2 cx_pow(vec2 a, float n) {
    float angle = atan(a.y, a.x);
    float r = length(a);
    float real = pow(r, n) * cos(n*angle);
    float im = pow(r, n) * sin(n*angle);
    return vec2(real, im);
}

vec2 cx_exp (vec2 z) {
	return exp(z.x) * vec2(cos(z.y), sin(z.y));
}

// vec2 cx_exp(vec2 a) {
    // float angle = atan(a.y, a.x);
    // return vec2(cos(angle), sin(angle));
// }

float computeDistance(vec3 A, vec3 B, vec3 C) {
	float x = length(cross(B - A, C - A));
	float y = length(B - A);
	return x / y;
}

bool getVoxel(ivec3 c) {
  int t = 80;
  return c.x < 1 || c.y < 1 || c.z < 1 || c.x > t || c.y > t || c.z > t; // || (c.x == 40 && c.y > 25);
	// return abs(c.x) > 20 || abs(c.y) > 20 || abs(c.z) > 20 || c == ivec3(5, 5, 5) || c == ivec3(5, 5, 6) || ((abs(c.x) < 2) && (c.z == 5) && false) || c == ivec3(2, 0, 0) || c == ivec3(-2, 0, 0);
	// return abs(c.x) > 20 || abs(c.y) > 20 || abs(c.z) > 20 || c.xy == ivec2(5, 5); // || c == ivec3(4, 12, 5) || c == ivec3(-4, -1, 9);
}

// Literally just iterate over the whole every possible object
OpticalObject getOpticalObject(vec3 pos) {
  for (int i = 0; i < NUMBER_OF_OPTICAL_OBJECTS; i++) {
    if (ivec3(OPTICAL_OBJECTS_ARRAY[i].pos) == ivec3(pos)) {
      return OPTICAL_OBJECTS_ARRAY[i];
    }
  }

  return OpticalObject(NONE, 0, vec3(0), vec3(0));
}

float checker(vec3 p) {
  float t = 10;
    return step(0.0, sin(PI * p.x + PI/t)*sin(PI *p.y + PI/t)*sin(PI *p.z + PI/t));
}

vec3 rotate3dZ(vec3 v, float a) {
  float cosA = cos(a);
  float sinA = sin(a);
  return vec3(
    v.x * cosA - v.y * sinA,
    v.x * sinA + v.y * cosA,
    v.z
  );
}

float rayleigh_range(float z, float w0, float wavelength) {
  float n = 1.0;
  float Z_r = (PI * w0 * n) / (wavelength);
  return w0 * sqrt(1 + pow(z / Z_r, 2));
}

vec3 rotate3D(vec3 v, vec2 rotation) {
    float cos_a_x = cos(rotation.y);
    float sin_a_x = sin(rotation.y);

    float cos_a_y = cos(rotation.x);
    float sin_a_y = sin(rotation.x);

    vec3 temp_vec = vec3(
        v.x,
        v.y * cos_a_x - v.z * sin_a_x,
        v.y * sin_a_x + v.z * cos_a_x
    );

    return vec3(
        temp_vec.x * cos_a_y + temp_vec.z * sin_a_y,
        temp_vec.y,
        -temp_vec.x * sin_a_y + temp_vec.z * cos_a_y
    );
}

vec3 rotate3dY(vec3 v, float a) {
    float cosA = cos(a);
    float sinA = sin(a);
    return vec3(
        v.x * cosA + v.z * sinA,
        v.y,
        -v.x * sinA + v.z * cosA
    );
}

vec3 rotate3dX(vec3 v, float a) {
    float cosA = cos(a);
    float sinA = sin(a);
    return vec3(
        v.x,
        v.y * cosA - v.z * sinA,
        v.y * sinA + v.z * cosA
    );
}

vec2 rotate2d(vec2 v, float a) {
	float sinA = sin(a);
	float cosA = cos(a);
	return vec2(v.x * cosA - v.y * sinA, v.y * cosA + v.x * sinA);	
}

void setup_ray_direction(inout RayObject ray) {
  ray.deltaDist = 1.0 / abs(ray.rayDir);
  ray.rayStep = ivec3(sign(ray.rayDir));
  ray.sideDist = (sign(ray.rayDir) * (vec3(ray.mapPos) - ray.rayPos) + (sign(ray.rayDir) * 0.5) + 0.5) * ray.deltaDist; 
}

void step_ray(inout RayObject ray) {
  ray.mask = lessThanEqual(ray.sideDist.xyz, min(ray.sideDist.yzx, ray.sideDist.zxy));
  ray.sideDist += vec3(ray.mask) * ray.deltaDist;
  ray.mapPos += ivec3(vec3(ray.mask)) * ray.rayStep;
}

void append_to_object_stack(inout OpticalObjectStack object_stack, OpticalObject object) {
  if (object_stack.number_of_objects_hit < 10) {
    object_stack.objects_hit[object_stack.number_of_objects_hit] = object;
    object_stack.number_of_objects_hit++;
  }
}

// Steps the ray object until it hits an object
// WILL MODIFY THE RAY OBJECT
OpticalObject travel_to_point(inout RayObject ray, bool should_stop_at_goal, vec3 goal) {
  for (int i = 0; i < MAX_RAY_STEPS; i++) {
    step_ray(ray);

    OpticalObject object_hit = getOpticalObject(ray.mapPos);

    if (!should_stop_at_goal && object_hit.type == LIGHT) {
      ray.distance_traveled = length(vec3(ray.mask) * (ray.sideDist - ray.deltaDist));
      ray.current_real_position = ray.rayPos + ray.rayDir * ray.distance_traveled;
      return object_hit;
    }

    if (should_stop_at_goal && ivec3(ray.mapPos) == ivec3(goal)) {
      ray.distance_traveled = length(vec3(ray.mask) * (ray.sideDist - ray.deltaDist));
      ray.current_real_position = ray.rayPos + ray.rayDir * ray.distance_traveled;
      return OpticalObject(GOAL, 0, vec3(0), goal);
    }

    if (object_hit.type != NONE) {
      ray.distance_traveled = length(vec3(ray.mask) * (ray.sideDist - ray.deltaDist));
      ray.current_real_position = ray.rayPos + ray.rayDir * ray.distance_traveled;
      append_to_object_stack(ray.object_stack, object_hit);
    }

    if (getVoxel(ray.mapPos)) {
      ray.distance_traveled = length(vec3(ray.mask) * (ray.sideDist - ray.deltaDist));
      ray.current_real_position = ray.rayPos + ray.rayDir * ray.distance_traveled;

      // float t = 0.5 + 0.5 * checker(dst);
      float h = 2 + checker(ray.current_real_position);
      ray.color *= vec4(h, h, h, 1);

      // vec4 attenuation_value = vec4(1 / pow(float(hits), 10));
      vec4 attenuation_value = vec4(1);

      if (ray.mask.x) {
          ray.color *= (vec4(0.8, 0.1, 0.1, 1.0) * attenuation_value);
      }

      if (ray.mask.y) {
          ray.color *= (vec4(0.1, 0.1, 0.8, 1.0) * attenuation_value);
      }

      if (ray.mask.z) {
          ray.color *= (vec4(0.1, 0.8, 0.1, 1.) * attenuation_value);
      }

      // ray.rayDir = reflect(ray.rayDir, vec3(ray.mask));
      // setup_ray_direction(ray);

      return OpticalObject(WALL, 0, vec3(0, 0, 0), ray.current_real_position);
    }
  }

  return OpticalObject(NONE, 0, vec3(0, 0, 0), ray.current_real_position);
}

void main() {
  vec4 color = vec4(1.);
  float anguloActualDePolarizacion = mod(t * 0.5, PI);

  ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);

  float width = 1000;

  vec4 fragCoord = vec4(texelCoord, 0.0, 1.0);
  vec2 screenPos = (fragCoord.xy / viewportDimensions.xy) * 2.0 - 1.0;
  vec3 cameraDir = vec3(0.0, 0.0, 0.8);
  vec3 cameraPlaneU = vec3(1.0, 0.0, 0.0);
  vec3 cameraPlaneV = vec3(0.0, 1.0, 0.0) * viewportDimensions.y / viewportDimensions.x;
  vec3 rayDir = cameraDir + screenPos.x * cameraPlaneU + screenPos.y * cameraPlaneV;
  vec3 rayPos = position;
  vec3 realPos = position;

  rayDir = rotate3dX(rayDir, rotation.y);
  rayDir = rotate3dY(rayDir, rotation.x);

  rayDir = normalize(rayDir);

  int hits = 0;

  float r = 3.;

  float theta_rot = 0;
  float phi_rot = 0;
  float r_dist = 10000;

  ivec3 mapPos = ivec3(floor(rayPos + 0.));

  vec3 deltaDist = 1.0 / abs(rayDir);
  ivec3 rayStep = ivec3(sign(rayDir));
  vec3 sideDist = (sign(rayDir) * (vec3(mapPos) - rayPos) + (sign(rayDir) * 0.5) + 0.5) * deltaDist; 

  vec3 lastDeltaDist;
  ivec3 lastRayStep;
  ivec3 lastMapPos;
  vec3 lastSideDist;
  bvec3 lastMask;

  vec3 lastHitPosition;

  bvec3 mask = lessThanEqual(sideDist.xyz, min(sideDist.yzx, sideDist.zxy));

  float d;
  d = length(vec3(mask) * (sideDist - deltaDist));
  vec3 dst = rayPos + rayDir * d;

  OpticalObject[10] temp_optical_object_array = {
    OpticalObject(NONE, 0, vec3(0), vec3(0)),
    OpticalObject(NONE, 0, vec3(0), vec3(0)),
    OpticalObject(NONE, 0, vec3(0), vec3(0)),
    OpticalObject(NONE, 0, vec3(0), vec3(0)),
    OpticalObject(NONE, 0, vec3(0), vec3(0)),
    OpticalObject(NONE, 0, vec3(0), vec3(0)),
    OpticalObject(NONE, 0, vec3(0), vec3(0)),
    OpticalObject(NONE, 0, vec3(0), vec3(0)),
    OpticalObject(NONE, 0, vec3(0), vec3(0)),
    OpticalObject(NONE, 0, vec3(0), vec3(0))
  };

  RayObject ray;
    ray.object_stack.objects_hit = temp_optical_object_array;
    ray.object_stack.number_of_objects_hit = 0;
    ray.rayDir = rayDir;
    ray.rayPos = rayPos;
    ray.mapPos = mapPos;
    ray.deltaDist = deltaDist;
    ray.rayStep = rayStep;
    ray.sideDist = sideDist;
    ray.mask = mask;
    ray.color = vec4(1.0);
    ray.distance_traveled = d;
    ray.current_real_position = dst;

  // Hit any wall from the starting POV
  // TODO handle NONE return type
  OpticalObject object_hit = travel_to_point(ray, false, vec3(0));

  vec2[NUMBER_OF_OPTICAL_OBJECTS]  E_lights = {vec2(0, 0), vec2(0, 0)};

  // if the first thing we hit was a light, just draw it
  if (object_hit.type == LIGHT) {
    color = vec4(object_hit.alternate_value, 1);

  } else {
    for (int optical_object_index = 0; optical_object_index < NUMBER_OF_OPTICAL_OBJECTS; optical_object_index++) {
      // First check if we are in a side that's visible by the light
      if (dot(ray.mapPos - LIGHT_OBJECTS[optical_object_index].pos, vec3(ray.mask) * -ray.rayStep) > 0) {
        color *= ray.color * vec4(0.05);

      } else {
        // save the original hit position (although we wont change 
        // ray.current_real_position anyway, this is just for conciseness)
        vec3 starting_point = ray.current_real_position;

        // Create a new ray to fire to the light and set it up -----
        RayObject ray_to_light = ray;
          ray_to_light.rayPos = ray_to_light.current_real_position;
          ray_to_light.rayDir = normalize(LIGHT_OBJECTS[optical_object_index].pos - ray_to_light.rayPos);
          ray_to_light.deltaDist = abs(vec3(length(ray_to_light.rayDir)) / ray_to_light.rayDir);
          ray_to_light.rayStep = ivec3(sign(ray_to_light.rayDir));
          ray_to_light.sideDist = (sign(ray_to_light.rayDir) * (vec3(ray_to_light.mapPos) - ray_to_light.rayPos) + (sign(ray_to_light.rayDir) * 0.5) + 0.5) * ray_to_light.deltaDist;
          ray_to_light.mask = lessThanEqual(ray_to_light.sideDist.xyz, min(ray_to_light.sideDist.yzx, ray_to_light.sideDist.zxy));
        // -----

        // Try to reach a light source
        OpticalObject result = travel_to_point(ray_to_light, true, LIGHT_OBJECTS[optical_object_index].pos);

        // we hit the light source we were looking for
        if (result.type == GOAL) {
          color *= ray.color * vec4(LIGHT_OBJECTS[optical_object_index].alternate_value, 1);

          float radius;
          float distance_from_real_light_center = 0.1;

          // we dont want to simulate a perfectly spherical light because those are boring
          // we will simulate a beam pointing to us, so the distances in the wall will be slightly
          // different and it won't seem like the phase is just a smear on the wall
          vec3 beam_pos = (normalize(position - LIGHT_OBJECTS[optical_object_index].pos) * distance_from_real_light_center) + LIGHT_OBJECTS[optical_object_index].pos;

          float z;

          // first light object is looking directly along the x axis
          if (optical_object_index == 0) {
            radius = computeDistance(LIGHT_OBJECTS[optical_object_index].pos, vec3(15.5, 25.5, 25.5), starting_point);
            z = length(LIGHT_OBJECTS[optical_object_index].pos - ray.current_real_position);

          // second light object is looking at the camera
          } else {
            radius = computeDistance(LIGHT_OBJECTS[optical_object_index].pos, position, starting_point);
            z = length(beam_pos - starting_point);
          }

          // Gaussian beam definition
          float wavelength = 0.1;
          float w0 = 0.1;
          float n = 1;
          float z_r = (PI * w0 * w0 * n) / wavelength;
          float w_z = w0 * sqrt(1 + pow(z / z_r, 2));
          float R_z = z * (1 + pow(z_r / z, 2));
          float gouy_z = atan(z / z_r);
          float E_0 = 50;
          float k = (2 * PI * n) / wavelength;

          // Electric field definition
          vec2 first_part = vec2(E_0 * (w0 / w_z) * exp(-pow(radius, 2) / pow(w_z, 2)), 0);
          vec2 second_part = cx_exp(vec2(0, k * z + k * (pow(radius, 2) / (2 * R_z)) - gouy_z));
          vec2 E = cx_mul(first_part, second_part);
          E_lights[optical_object_index] = E;

        // we hit a different light source
        } else if (result.type == LIGHT) {
          color = vec4(result.alternate_value, 1);

        } else {

          // the ray couldnt hit the light
          color *= ray_to_light.color * vec4(0.1);
        }
      }
    }
  }

  vec2 final_electric_field = vec2(0, 0);

  for (int i = 0; i < NUMBER_OF_OPTICAL_OBJECTS; i++) {
    final_electric_field = cx_add(E_lights[i], final_electric_field);
  }

  color *= pow(cx_abs(final_electric_field), 2) + 0.2;

  imageStore(imgOutput, texelCoord, color);
}
